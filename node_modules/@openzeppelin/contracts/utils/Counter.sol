// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @dev Provides counters that can only be incremented, decremented or reset all at once.
 *
 * TIP: This library is used in a lot of contracts, and we know it can be a bit
 * confusing. If you want to learn how to use it in depth, go to
 * https://forum.openzeppelin.com/t/using-the-counters-library/3584.
 */
library Counters {
    struct Counter {
        // This variable should not be accessed by user of the library
        // use the `current` function instead.
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}
